{"version":3,"file":"/Users/trinominis/Documents/projects/udemy/ng2andFirebase/final-project/batch-server.ts","sources":["/Users/trinominis/Documents/projects/udemy/ng2andFirebase/final-project/batch-server.ts"],"names":[],"mappings":";;AACA,sEAAoE;AACpE,qCAAyD;AACzD,IAAM,KAAK,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAGxC,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;AAExC,wBAAa,CAAC,gCAAc,CAAC,CAAC;AAE9B,eAAI,EAAE;KACH,0BAA0B,CAAC,iBAAiB,EAAE,SAAS,CAAC;KACxD,IAAI,CAAC,WAAW,CAAC;KACjB,KAAK,CAAC,OAAO,CAAC,CAAC;AAElB,iBAAiB,GAAG;IAClB,OAAO,CAAC,KAAK,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC;IACtC,OAAO,CAAC,IAAI,EAAE,CAAC;AACjB,CAAC;AAED;IACE,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;IAEpC,IAAM,UAAU,GAAG,mBAAQ,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IAC7C,IAAM,mBAAmB,GAAG,mBAAQ,EAAE,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;IAC/D,IAAM,QAAQ,GAAG,mBAAQ,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IAEzC,IAAM,KAAK,GAAG,IAAI,KAAK,CAAC,QAAQ,EAAE,UAAU,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM;QAEzE,OAAO,CAAC,GAAG,CAAC,6BAA6B,EAAE,IAAI,CAAC,CAAC;QAEjD,IAAM,mBAAmB,GAAG,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE,CAAC;QAErE,IAAM,4BAA4B,GAChC,mBAAmB,CAAC,KAAK,CAAI,IAAI,CAAC,QAAQ,SAAI,IAAI,CAAC,QAAU,CAAC,CAAC,MAAM,EAAE,CAAC;QAE1E,OAAO,CAAC,GAAG,CAAC,CAAC,mBAAmB,EAAE,4BAA4B,CAAC,CAAC;aAC7D,IAAI,CACL;YACE,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;YAC9B,OAAO,EAAE,CAAC;QACZ,CAAC,CACA;aACA,KAAK,CAAC;YACL,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;YACxC,MAAM,EAAE,CAAC;QACX,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["\nimport { firebaseConfig } from './src/environments/firebase.config';\nimport { initializeApp, auth, database } from 'firebase';\nconst Queue = require('firebase-queue');\n\n\nconsole.log('Running batch server ...');\n\ninitializeApp(firebaseConfig);\n\nauth()\n  .signInWithEmailAndPassword('admin@email.com', 'Test123')\n  .then(runConsumer)\n  .catch(onError);\n\nfunction onError(err) {\n  console.error('Could not login', err);\n  process.exit();\n}\n\nfunction runConsumer() {\n  console.log('Running consumer ...');\n\n  const lessonsRef = database().ref('lessons');\n  const lessonsPerCourseRef = database().ref('lessonsPerCourse');\n  const queueRef = database().ref('queue');\n\n  const queue = new Queue(queueRef, function (data, progress, resolve, reject) {\n\n    console.log('received delete request ...', data);\n\n    const deleteLessonPromise = lessonsRef.child(data.lessonId).remove();\n\n    const deleteLessonPerCoursePromise =\n      lessonsPerCourseRef.child(`${data.courseId}/${data.lessonId}`).remove();\n\n    Promise.all([deleteLessonPromise, deleteLessonPerCoursePromise])\n      .then(\n      () => {\n        console.log('lesson deleted');\n        resolve();\n      }\n      )\n      .catch(() => {\n        console.log('lesson deletion in error');\n        reject();\n      });\n  });\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n"]}